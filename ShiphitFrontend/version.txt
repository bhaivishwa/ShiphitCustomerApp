import React, { useState, useEffect, useRef } from "react";
import {
  StyleSheet,
  View,
  Text,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
  Image,
} from "react-native";
import MapView, { Marker, Polyline, AnimatedRegion } from "react-native-maps";
import * as Location from "expo-location";

const GOOGLE_MAPS_API_KEY = "AIzaSyB_sePfGC7khG1CVlY87cTc4qNUnFsMS5Q"; // Replace with actual API Key

export default function RealTimeNavigation() {
  const [location, setLocation] = useState(null);
  const [routeCoordinates, setRouteCoordinates] = useState([]);
  const [loadingRoute, setLoadingRoute] = useState(false);
  const [isNavigating, setIsNavigating] = useState(false);
  const [isReached, setIsReached] = useState(false);

  const mapRef = useRef(null);
  const locationSubscription = useRef(null);
  const animatedLocation = useRef(
    new AnimatedRegion({
      latitude: 0,
      longitude: 0,
      latitudeDelta: 0.005,
      longitudeDelta: 0.005,
    })
  ).current;

  const destination = {
    latitude: 13.016791950375069,
    longitude: 80.20523297975802,
  };

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== "granted") {
        Alert.alert("Permission Denied", "Enable location services.");
        return;
      }

      let currentLocation = await Location.getCurrentPositionAsync({});
      setLocation(currentLocation.coords);
      animatedLocation.setValue({
        latitude: currentLocation.coords.latitude,
        longitude: currentLocation.coords.longitude,
      });

      locationSubscription.current = await Location.watchPositionAsync(
        {
          accuracy: Location.Accuracy.High,
          timeInterval: 2000,
          distanceInterval: 1,
        },
        (newLocation) => {
          setLocation(newLocation.coords);
          animateUserLocation(newLocation.coords);
          checkIfReached(newLocation.coords);
        }
      );
    })();

    return () => locationSubscription.current?.remove();
  }, []);

  const animateUserLocation = (coords) => {
    animatedLocation
      .timing({
        latitude: coords.latitude,
        longitude: coords.longitude,
        duration: 1000,
        useNativeDriver: false,
      })
      .start();
    mapRef.current?.animateCamera({
      center: { latitude: coords.latitude, longitude: coords.longitude },
      zoom: 17,
    });
  };

  const getDistance = (lat1, lon1, lat2, lon2) => {
    const R = 6371000;
    const dLat = (lat2 - lat1) * (Math.PI / 180);
    const dLon = (lon2 - lon1) * (Math.PI / 180);
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(lat1 * (Math.PI / 180)) *
        Math.cos(lat2 * (Math.PI / 180)) *
        Math.sin(dLon / 2) *
        Math.sin(dLon / 2);
    return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  };

  const checkIfReached = (coords) => {
    if (!coords) return;
    const distance = getDistance(
      coords.latitude,
      coords.longitude,
      destination.latitude,
      destination.longitude
    );

    if (distance <= 50 && !isReached) {
      setIsReached(true);
      setIsNavigating(false);

      // Reset button color after 10 seconds
      setTimeout(() => {
        setIsReached(false);
      }, 10000);
    }
  };

  const fetchRoute = async () => {
    if (!location) {
      Alert.alert("Error", "Current location not available.");
      return;
    }
    setLoadingRoute(true);
    try {
      const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${location.latitude},${location.longitude}&destination=${destination.latitude},${destination.longitude}&mode=driving&key=${GOOGLE_MAPS_API_KEY}`;
      const response = await fetch(url);
      const data = await response.json();
      if (data.status !== "OK") {
        Alert.alert("API Error", `Error: ${data.status}`);
        return;
      }
      setRouteCoordinates(
        decodePolyline(data.routes[0].overview_polyline.points)
      );
    } catch (error) {
      Alert.alert("Error", `Could not fetch route. ${error.message}`);
    }
    setLoadingRoute(false);
  };

  const decodePolyline = (encoded) => {
    let points = [],
      index = 0,
      lat = 0,
      lng = 0;
    while (index < encoded.length) {
      let b,
        shift = 0,
        result = 0;
      do {
        b = encoded.charCodeAt(index++) - 63;
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);
      lat += result & 1 ? ~(result >> 1) : result >> 1;
      shift = 0;
      result = 0;
      do {
        b = encoded.charCodeAt(index++) - 63;
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);
      lng += result & 1 ? ~(result >> 1) : result >> 1;
      points.push({ latitude: lat / 1e5, longitude: lng / 1e5 });
    }
    return points;
  };

  return (
    <View style={styles.container}>
      <MapView ref={mapRef} style={styles.map}>
        {location && (
          <Marker.Animated coordinate={animatedLocation}>
            <Image
              source={require("./assets/bike.png")}
              style={styles.bikeImage}
            />
          </Marker.Animated>
        )}
        <Marker coordinate={destination} title="Phoenix Mall, Velachery" />
        {routeCoordinates.length > 0 && (
          <Polyline
            coordinates={routeCoordinates}
            strokeWidth={5}
            strokeColor="blue"
          />
        )}
      </MapView>

      <TouchableOpacity
        style={[styles.navButton, isReached && styles.reachedButton]}
        onPress={() => {
          if (!isReached) {
            fetchRoute();
            setIsNavigating(true);
          }
        }}
      >
        {loadingRoute ? (
          <ActivityIndicator size="small" color="#fff" />
        ) : (
          <Text style={styles.buttonText}>
            {isReached ? "Reached" : "Start Navigation"}
          </Text>
        )}
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  map: { width: "100%", height: "100%" },
  navButton: {
    position: "absolute",
    bottom: 20,
    left: 20,
    right: 20,
    backgroundColor: "#007AFF",
    paddingVertical: 14,
    borderRadius: 12,
    alignItems: "center",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 5,
    elevation: 5,
  },
  reachedButton: { backgroundColor: "green" },
  buttonText: { color: "white", fontSize: 18, fontWeight: "bold" },
  bikeImage: { width: 35, height: 35, transform: [{ scaleX: -1 }] },
});
